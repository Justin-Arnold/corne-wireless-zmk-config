/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip { chain-length = <27>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E     &kp R  &kp T        &kp Y          &kp U  &kp I              &kp O    &kp P     &kp BSPC
&kp TAB     &kp A  &kp S  &kp D     &kp F  &kp G        &kp H          &kp J  &kp K              &kp L    &kp SEMI  &kp SQT
&kp LSHFT   &kp Z  &kp X  &kp C     &kp V  &kp B        &kp N          &kp M  &kp COMMA          &kp DOT  &kp FSLH  &kp RIGHT_ALT
                          &kp LGUI  &mo 1  &kp SPACE    &kp BACKSPACE  &mo 2  &kp RIGHT_CONTROL
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&trans     &trans  &trans  &trans    &trans  &trans       &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT  &trans  &trans  &trans    &trans  &trans       &trans    &trans    &trans    &trans     &trans  &trans
                           &kp LGUI  &trans  &kp SPACE    &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT         &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC         &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };

        combo_layer {
            bindings = <
&trans      &trans            &trans            &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp C_PREVIOUS      &kp C_NEXT        &kp C_BRIGHTNESS_DEC    &kp C_BRIGHTNESS_INC     &trans            &trans  &trans
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4        &kp C_PLAY_PAUSE  &kt LA(LC(LEFT_ARROW))  &kp LC(LA(RIGHT_ARROW))  &trans            &trans  &trans
&trans      &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)   &kp LA(NUMBER_4)  &kp LA(NUMBER_5)    &kp LA(NUMBER_6)  &kp LA(NUMBER_7)        &kp LA(NUMBER_8)         &kp LA(NUMBER_9)  &trans  &trans
                                                &trans             &trans            &trans              &trans            &trans                  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans                &trans                &trans                &trans                &trans                  &trans                &trans                &trans                &trans                &trans  &trans
&trans  &trans                &trans                &trans                &trans                &trans                  &trans                &trans                &trans                &trans                &trans  &trans
&sl 4   &kp LA(LS(NUMBER_1))  &kp LS(LA(NUMBER_2))  &kp LS(LA(NUMBER_3))  &kp LS(LA(NUMBER_4))  &kp LS(LA(NUMBER_5))    &kp LS(LA(NUMBER_6))  &kp LS(LA(NUMBER_7))  &kp LS(LA(NUMBER_8))  &kp LS(LA(NUMBER_9))  &trans  &trans
                                                    &trans                &trans                &trans                  &trans                &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        combo_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
